import subprocess
from sqlQuery import sqlQuery
from mfQuery import MFQuery
from emfQuery import EMFQuery


def main():
    """
    This is the generator code. It should take in the MF structure and generate the code
    needed to run the query. That generated code should be saved to a 
    file (e.g. _generated.py) and then run.
    """

    file = input("Enter file name to read off of or enter nothing to pick your own variables")
    select = ""
    groupingVarAmt = ""
    groupingAttributes = ""
    fVector = ""
    predicate = ""
    havingVar = ""

    if file != "":
        with open(file) as f:
            text = f.read().split('\n')

        text = (line.strip() for line in text)

        for i, line in enumerate(text):
            if line == 'SELECT ATTRIBUTE(S):':
                select = text[i+1].strip()
            elif line == 'NUMBER OF GROUPING VARIABLES(N)':
                groupingVarAmt = int(text[i+1]).strip()
            elif line == 'GROUPING ATTRIBUTES(V)':
                groupingAttributes = text[i+1].strip()
            elif line == 'F-VECT([F])':
                fVector = text[i+1].strip()
            elif line == 'SELECT CONDITION-VECT([C])':
                predicate = text[i+1].strip()
            elif line == 'HAVING_CONDITION(G)':
                havingVar = text[i+1].strip()
            #select condition vect isn't all in a single line meanwhile all the other are so 
            #if we hit something that isn't one of the lines
            #we can assume it is the rest of the predicates (in a file)
            else:
                predicate += "," + text[i].strip()  
    else:
        select = input("Input each select attributes seperated by a comma: ").strip()
        groupingVarAmt = input("Input the amount of grouping variables: ").strip()
        groupingAttributes = input("Input the grouping attributes seperated by a comma if more than one: ").strip()
        fVector = input("Input the list of aggregate functions each seperated by a comma: ").strip()
        predicate = input("Input each predicate seperated by a comma and having a space after each comma: ").strip()
        havingVar = input("Input each having condition seperated by spaces with AND or OR: ").strip().lower()
            
    if groupingVarAmt == '0':
        sqlQuery(select, groupingAttributes, predicate, havingVar)

    for pred in predicate.split(','):
        for attribute in pred.split(','):
            if (attribute in groupingAttributes.split(',')):
                EMFQuery(select, groupingVarAmt, groupingAttributes, fVector, predicate, havingVar)   
                break

    MFQuery(select, groupingVarAmt, groupingAttributes, fVector, predicate, havingVar)        


    body = """
    for row in cur:
        if row['quant'] > 10:
            _global.append(row)
    """

    # Note: The f allows formatting with variables.
    #       Also, note the indentation is preserved.
    tmp = f"""
import os
import psycopg2
import psycopg2.extras
import tabulate
from dotenv import load_dotenv

# DO NOT EDIT THIS FILE, IT IS GENERATED BY generator.py

def query():
    load_dotenv()

    user = os.getenv('USER')
    password = os.getenv('PASSWORD')
    dbname = os.getenv('DBNAME')

    conn = psycopg2.connect("dbname="+dbname+" user="+user+" password="+password,
                            cursor_factory=psycopg2.extras.DictCursor)
    cur = conn.cursor()
    cur.execute("SELECT * FROM sales")
    
    _global = []
    {body}
    
    return tabulate.tabulate(_global,
                        headers="keys", tablefmt="psql")

def main():
    print(query())
    
if "__main__" == __name__:
    main()
    """

    # Write the generated code to a file
    open("_generated.py", "w").write(tmp)
    # Execute the generated code
    subprocess.run(["python", "_generated.py"])


if "__main__" == __name__:
    main()
